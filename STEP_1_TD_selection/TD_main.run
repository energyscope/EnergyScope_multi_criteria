<<<<<<< refs/remotes/origin/ES_Multi_criteria
# -------------------------------------------------------------------------------------------------------------------------
#	EnergyScope TD is an open-source energy model suitable for country scale analysis. It is a simplified representation of an urban or national energy system accounting for the energy flows
#	within its boundaries. Based on a hourly resolution, it optimises the design and operation of the energy system while minimizing the cost of the system.
#
#	Copyright (C) <2018-2019> <Ecole Polytechnique Fédérale de Lausanne (EPFL), Switzerland and Université catholique de Louvain (UCLouvain), Belgium>
#
#	Licensed under the Apache License, Version 2.0 (the "License");
#	you may not use this file except in compliance with the License.
#	You may obtain a copy of the License at
#
#		http://www.apache.org/licenses/LICENSE-2.0
#
#	Unless required by applicable law or agreed to in writing, software
#	distributed under the License is distributed on an "AS IS" BASIS,
#	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#	See the License for the specific language governing permissions and
#	limitations under the License.
#
#	Description and complete License: see LICENSE file.
# ---------------------------------------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------
# TYPICAL DAY SELECTION
# from F. Dominguez-Munoz et al., Selection of typical demand days for CHP optimization, 2011
#----------------------------------------------------------------------------------

model TD_main.mod;
data data.dat;

##############################################
###               SOLVERS                  ###
##############################################
# WARNING: Results might differ between solvers (little difference).
# As an example, Authors found a difference for the Swiss case:
#                         TD:  1	2	3	4	5	6	7	8	9	10	11	12
#                AMPL-CPLEX : 13	49	84	95	107	156	209	238	259	325	347	359
#                GLPSOL     : 13	49	84	95	107	156	209	238	259	319	325	347
#                The paper is based on AMPL results.

###  AMPL version
option solver cplex;

solve;

###  GLPK version
# solve;

##############################################
###            Printing output             ###
##############################################
for {i in DAYS}{
 printf "%d\t\n",(sum{j in DAYS} j*Cluster_matrix[j,i]) >> "TD_of_days.out";
}
=======
################################################################################
################################################################################
##																			  ##
##                     			SETTING PROBLEM								  ##
##																			  ##
################################################################################
################################################################################

# Load standard model
model TD_main.mod;

# Load standard data
data data.dat    # not TDs depending data


################################################################################
################################################################################
##																			  ##
##                      	SOLVER OPTIONS       							  ##
##																			  ##
################################################################################
################################################################################

option solver cplex; # for Windows users
#option solver './cplex'; # for Mac users

option show_stats 1; # show statistics

option cplex_options  'mipdisplay 5 mipinterval 1000';
option log_file 'log.txt';   #write the log in a .txt file. Create the file before running.


option cplex_options $cplex_options 'mipgap 0.01 ';

################################################################################
################################################################################
##																			  ##
##                      	RUN & SAVE PATH      							  ##
##																			  ##
################################################################################
################################################################################

solve;

### Printing output
for {i in DAYS}{
 printf "%d\t\n",(sum{j in DAYS} j*Cluster_matrix[j,i]) >> "TD_of_days.out";
}
>>>>>>> Move to ampl version
