#!/usr/bin/python3
# -*- coding: utf-8 -*-
"""
Data of creation: October 2020

It generates a Sankey Diagram for the specific csv format of the file input2sankey.csv, generated by EnergyScope TD [1].
The generating function is inspired by [2].

[1] G. Limpens, S . Moret, H. Jeanmart, F. Maréchal (2019).
     EnergyScope TD: a novel open-source model for regional energy systems.
     Applied Energy 2019; Volume 255. https://doi.org/10.1016/j.apenergy.2019.113729
[2] https://medium.com/kenlok/how-to-create-sankey-diagrams-from-dataframes-in-python-e221c1b4d6b0

@author: Noé Cornet (UCLouvain), Antoine Dubois (ULiège)
"""
import pandas as pd
import plotly.graph_objects as go


def hex_to_rgb(hex_color: str, alpha: float) -> str:
    """Convert color in hex to rgb and add alpha channel"""

    hex_color = hex_color.lstrip('#')
    r = int(hex_color[0:2], 16)
    g = int(hex_color[2:4], 16)
    b = int(hex_color[4:6], 16)

    return f"rgba({r}, {g}, {b}, {alpha:.2f})"


def generate_sankey(flows_df: pd.DataFrame, title: str = 'Sankey Diagram') -> go.Figure:
    """
    Create plotly sankey diagram from flows dataframe

    Parameters
    ----------
    flows_df: pd.DataFrame
        DataFrame with columns 'source' (type: str), 'target' (type: str), 'realValue' (type: float)
        and 'layerColor' (type: str, color in hex starting with #)
    title: str (default: Sankey Diagram)
        Title displayed on the diagram

    Returns
    -------
    go.Figure
        Plotly sankey diagram
    """

    # Gather all unique source and targets which will serve as labels of our nodes
    labels = sorted(list(set(flows_df.source.values) | set(flows_df.target.values)))

    # Associate identifier to each unique source/target as plotly does not accept strings
    flows_df['sourceID'] = flows_df['source'].apply(lambda x: labels.index(x))
    flows_df['targetID'] = flows_df['target'].apply(lambda x: labels.index(x))

    # creating the sankey diagram
    data = go.Sankey(
        valueformat=".1f",
        valuesuffix="TWh",
        node=dict(
            pad=15,
            thickness=20,
            line=dict(
                color="black",
                width=0.5
            ),
            label=labels,
            color=['#4B8BBE']*len(labels)
        ),
        link=dict(
            source=flows_df['sourceID'],
            target=flows_df['targetID'],
            value=flows_df['realValue'],
            # Convert color to rgb to add alpha channel
            color=flows_df['layerColor'].apply(lambda h: hex_to_rgb(h, 0.5))
        )
    )
    layout = dict(
        title=title,
        font=dict(
            size=10
        )
    )

    return go.Figure(data=[data], layout=layout)


def draw_sankey(sankey_dir: str, title='Energy', auto_open: bool = True) -> None:
    """
    Generate a html sankey diagram from a csv input file

    Parameters
    ----------
    sankey_dir: str
        Path to directory containing the input file and where the output file will be generated
    title: str (default: 'Energy')
        Title displayed on the diagram
    auto_open: bool (default: True)
        Whether the diagram should automatically be opened in the default browser or not
    """
    # Read the input data
    flows = pd.read_csv(f"{sankey_dir}/input2sankey.csv")
    # Generate the figure
    fig = generate_sankey(flows, title=title)
    # Save the figure
    fig.write_html(f"{sankey_dir}/python_generated_sankey.html", auto_open=auto_open)


if __name__ == '__main__':

    dir_name = "/home/duboisa1/Global_Grid/code/EnergyScope_multi_criteria/case_studies/gwp_constraint_35000/"
    draw_sankey(dir_name + "cost/output/sankey")
    draw_sankey(dir_name + "einv/output/sankey")

    # epsilons = [0.0025, 0.005, 0.01, 0.025, 0.05, 0.075]
    # for epsilon in epsilons:
    #     draw_sankey(f"{dir_name}/cost_epsilon_{epsilon}/output/sankey")
