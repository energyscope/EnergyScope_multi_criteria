#!/usr/bin/python3
# -*- coding: utf-8 -*-
"""
# TODO: this file needs a full refactoring
Data of creation: October 2020

It generates a Sankey Diagram for the specific csv format of the file input2sankey.csv, generated by EnergyScope TD [1].
The generating function is inspired by [2].

[1] G. Limpens, S . Moret, H. Jeanmart, F. Maréchal (2019).
     EnergyScope TD: a novel open-source model for regional energy systems.
     Applied Energy 2019; Volume 255. https://doi.org/10.1016/j.apenergy.2019.113729
[2] https://medium.com/kenlok/how-to-create-sankey-diagrams-from-dataframes-in-python-e221c1b4d6b0

@author: Noé Cornet (UCLouvain), Antoine Dubois (ULiège)
"""

import getopt
import sys
from pathlib import Path

import pandas as pd
import plotly.graph_objects as go

# TODO: use argparse
__helpmsg__ = '''
ESSankey help message.
Usage: ESSankey.py [OPTIONS]

\tOPTIONS:
\t\t-h
\t\t\tdisplay this help message.
\t\t-p directory_path, --path=directory_path
\t\t\tindicate the path of the sankey directory. Default is the current directory (\'./\').
\t\t\tSo leave empty only if you are calling this function from the directory where \'input2sankey.csv\' is located.
\t\t-o file, --ofile=file\n\t\t\tindicate the output html (temporary) file. 
Default is \'directory_path/python_generated_sankey.html\'.
\t\t-n, --no-open
\t\t\tprevent from automatically opening the generated html file in the browser.
'''


def draw_sankey(some_path: str = "./", output_fn: str = 'TO_REPLACE', auto_open: bool = True) -> None:

    some_path = Path(some_path)

    if some_path.stem == "input2sankey":
        some_path = some_path.parent
        print("Warning: you should not include 'input2sankey.csv' in your path, "
              "but only the path of the directory containing this file.")

    # TODO: this is shit
    if output_fn == 'TO_REPLACE':
        output_fn = some_path / 'python_generated_sankey.html'

    if output_fn.parent.stem == "input2sankey":
        output_fn = output_fn.parent.parent / output_fn.name

    flows = pd.read_csv(some_path / "input2sankey.csv")
    fig = generate_sankey(flows, cat_cols=['source', 'target'], value_cols='realValue', title='Energy',
                          color_col='layerColor')
    fig.write_html(str(output_fn), auto_open=auto_open)
    # fig.show()


def generate_sankey(df, cat_cols=[], value_cols='', title='Sankey Diagram', color_col=[]):

    # maximum of 6 value cols -> 6 colors
    color_palette = ['#4B8BBE', '#306998', '#FFE873', '#FFD43B', '#646464']
    label_list = []
    color_num_list = []
    for cat_col in cat_cols:
        label_list_temp = list(set(df[cat_col].values))
        color_num_list.append(len(label_list_temp))
        label_list = label_list + label_list_temp

    # remove duplicates from labelList
    label_list = list(dict.fromkeys(label_list))

    # define colors based on number of levels
    color_list = []
    for idx, color_num in enumerate(color_num_list):
        color_list = color_list + [color_palette[idx]] * color_num

    # transform df into a source-target pair
    for i in range(len(cat_cols) - 1):
        if i == 0:
            source_target_df = df[[cat_cols[i], cat_cols[i + 1], value_cols, color_col]]
            source_target_df.columns = ['source', 'target', 'count', 'color']
        else:
            temp_df = df[[cat_cols[i], cat_cols[i + 1], value_cols, color_col]]
            temp_df.columns = ['source', 'target', 'count', 'color']
            source_target_df = pd.concat([source_target_df, temp_df])
        source_target_df = source_target_df.groupby(['source', 'target']).agg(
            {'count': 'sum', 'color': 'first'}).reset_index()

    # source_target_df
    # add index for source-target pair
    source_target_df['sourceID'] = source_target_df['source'].apply(lambda x: label_list.index(x))
    source_target_df['targetID'] = source_target_df['target'].apply(lambda x: label_list.index(x))

    # creating the sankey diagram
    data = go.Sankey(
        valueformat=".1f",
        valuesuffix="TWh",
        node=dict(
            pad=15,
            thickness=20,
            line=dict(
                color="black",
                width=0.5
            ),
            label=label_list,
            color=color_list
        ),
        link=dict(
            source=source_target_df['sourceID'],
            target=source_target_df['targetID'],
            value=source_target_df['count'],
            color=source_target_df['color'].apply(lambda h: hex_to_rgb(h, 0.5))
        )
    )

    layout = dict(
        title=title,
        font=dict(
            size=10
        )
    )

    fig = go.Figure(data=[data], layout=layout)
    return fig


def hex_to_rgb(hex_color, alpha):

    hex_color = hex_color.lstrip('#')
    r = int(hex_color[0:2], 16)
    g = int(hex_color[2:4], 16)
    b = int(hex_color[4:6], 16)

    if alpha:
        return "rgba(%d, %d, %d, %.2f)" % (r, g, b, alpha)
    else:
        return "rgba(%d, %d, %d)" % (r, g, b)


def main(argv):
    """
    Usage:
         python3 ESSankey.py
             -> when calling from the 'output/sankey/' directory
         python3 ESSankey.py -p path/to/sankey/
             -> when calling frome anywhere else.
         python3 ESSankey.py -h
             -> to display the help message.
    """

    some_path = Path('../postprocessing/')
    output_fn = ''
    auto_open = True
    try:
        opts, args = getopt.getopt(argv, "hp:o:n", ["path=", "ofile=", "no-open"])
    except getopt.GetoptError:
        # TODO: this is shit
        print(__helpmsg__)
        sys.exit(2)

    for opt, arg in opts:
        if opt == '-h':
            print(__helpmsg__)
            sys.exit()
        elif opt in ("-p", "--path"):
            some_path = Path(arg)
        elif opt in ("-o", "--ofile"):
            output_fn = Path(arg)
        elif opt in ("-n", "--no-open"):
            auto_open = False
    if output_fn == '':
        output_fn = some_path / 'python_generated_sankey.html'

    draw_sankey(some_path=some_path, output_fn=output_fn, auto_open=auto_open)


if __name__ == '__main__':
    # print("Executing without argument: assuming that this program file is in the same directory as the "
    #       "'input2sankey.csv' directory.\nThe default input file is thus './input2sankey.csv'.")
    # print("If this does not work, please open python3 and run:\n\t>>> "
    #       "from ESSankey.py import draw_sankey\n\t>>> draw_sankey(path='/path/to/sankey/')")
    # main(sys.argv[1:])
    some_path_ = Path('../../case_studies//test2/output/sankey')
    draw_sankey(some_path=some_path_, auto_open=True)
