################################################################################
################################################################################
##																			  ##
##                     			SAVING RESULTS								  ##
##																			  ##
################################################################################
################################################################################

## Saving sets and parameters to output file
option show_stats 0; # show statistics
option times 0; # show time
option gentimes 0; # show time

## Print cost breakdown to txt file.
print "--------------SAVING COSTS -----------";
printf "%s\t%s\t%s\t%s\n", "Name", "C_inv", "C_maint", "C_op" > (PathName & "/cost_breakdown.txt");
for {i in TECHNOLOGIES union RESOURCES}{
    printf "%s\t%.6f\t%.6f\t%.6f\n", i, if i in TECHNOLOGIES then (tau[i] * C_inv[i]) else 0, if i in TECHNOLOGIES then C_maint [i] else 0, if i in RESOURCES then C_op [i] else 0 >> (PathName & "/cost_breakdown.txt");
}

## Print GWP tech breakdown
print "--------------SAVING GWP_TECH -----------";
printf "Tech\t" > (PathName & "/cost_op_tech.txt");
for {i in RESOURCES diff BIOFUELS diff EXPORT}{
    printf "%s\t",i >> (PathName & "/cost_op_tech.txt");
}
for {j in TECHNOLOGIES diff STORAGE_TECH}{
    printf "\n %s \t", j >> (PathName & "/cost_op_tech.txt");
    for {i in RESOURCES diff BIOFUELS diff EXPORT}{
        printf " %f\t",if layers_in_out[j, i] == 0 then 0
                        else
                            sum {t in PERIODS, h in HOUR_OF_PERIOD [t], td in TYPICAL_DAY_OF_PERIOD [t]}
                            ((c_op [i] * F_t [i, h, td] * t_op [h, td]) * (layers_in_out[j, i] * F_t [j, h, td]) # The specific resources emissions times the share of the technology
                            /(min(-0.000001,
                            sum{j2 in TECHNOLOGIES diff STORAGE_TECH }
                            (layers_in_out[j2, i] * F_t [j2, h, td])
                            + sum {j2 in STORAGE_TECH} ( Storage_out [j2, i, h, td] - Storage_in [j2, i, h, td] )) #The total share of technologies
                            ))
        >> (PathName & "/cost_op_tech.txt");
    }
}

## Print resources breakdown to txt file.
print "--------------SAVING RESOURCES -----------";
printf "%s\t%s\t%s\n", "Name", "Used", "Potential" > (PathName & "/resources_breakdown.txt");
for {i in RESOURCES}{
    printf "%s\t%.6f\t%.6f\n", i, sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} (F_t [i, h, td] * t_op [h, td]) , avail [i] >> (PathName & "/resources_breakdown.txt");
}


## Print GWP breakdown
print "--------------SAVING GWP -----------";
printf "%s\t%s\t%s\n", "Name", "GWP_constr", "GWP_op" > (PathName & "/gwp_breakdown.txt");
for {i in TECHNOLOGIES union RESOURCES}{
    printf "%s\t%.6f\t%.6f\n", i, if i in TECHNOLOGIES then GWP_constr [i] / lifetime [i] else 0, if i in RESOURCES then GWP_op [i] else 0 >> (PathName & "/gwp_breakdown.txt");
}

## Print Einv breakdown
print "--------------SAVING Einv -----------";
printf "%s\t%s\t%s\n", "Name", "GWP_constr", "GWP_op" > (PathName & "/einv_breakdown.txt");
for {i in TECHNOLOGIES union RESOURCES}{
    printf "%s\t%.6f\t%.6f\n", i, if i in TECHNOLOGIES then (Einv_constr [i] / lifetime [i]) else 0, if i in RESOURCES then Einv_op [i] else 0 >> (PathName & "/einv_breakdown.txt");
}

## Print GWP tech breakdown
print "--------------SAVING GWP_TECH -----------";
printf "Tech\t" > (PathName & "/gwp_tech.txt");
for {i in RESOURCES diff BIOFUELS diff EXPORT}{
    printf "%s\t",i >> (PathName & "/gwp_tech.txt");
}
for {j in TECHNOLOGIES diff STORAGE_TECH}{
    printf "\n %s \t", j >> (PathName & "/gwp_tech.txt");
    for {i in RESOURCES diff BIOFUELS diff EXPORT}{
        printf " %f\t",if layers_in_out[j, i] == 0 then 0
                        else
                            sum {t in PERIODS, h in HOUR_OF_PERIOD [t], td in TYPICAL_DAY_OF_PERIOD [t]}
                            ((gwp_op [i] * F_t [i, h, td] * t_op [h, td]) * (layers_in_out[j, i] * F_t [j, h, td]) # The specific resources emissions times the share of the technology
                            /(min(-0.000001,
                            sum{j2 in TECHNOLOGIES diff STORAGE_TECH }
                            (layers_in_out[j2, i] * F_t [j2, h, td])
                            + sum {j2 in STORAGE_TECH} ( Storage_out [j2, i, h, td] - Storage_in [j2, i, h, td] )) #The total share of technologies
                            ))
        >> (PathName & "/gwp_tech.txt");
    }
}


## Print losses to txt file
print "--------------SAVING Losses -----------";
printf "%s\t%s\n", "End use", "Losses" > (PathName & "/losses.txt");
for {i in END_USES_TYPES}{
        printf "%s\t%.3f\n",i,  sum{t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t] }(Network_losses [i,h,td] * t_op [h,td])  >> (PathName & "/losses.txt");
}

## Print ASSETS to txt file
print "--------------SAVING ASSETS -----------";
printf "TECHNOLOGIES\t c_inv\t c_maint\t lifetime\t  f_min\t f\t f_max\t fmin_perc\t" > (PathName & "/assets.txt");
printf "f_perc\t fmax_perc\t c_p\t c_p_max\t tau\t gwp_constr" > (PathName & "/assets.txt"); # Must be split in 2 parts, otherwise too long for GLPK
printf "\n UNITS\t[MCHCapitalf/GW]\t [MCHCapitalf/GW]\t [y]\t [GW or GWh]\t" >> (PathName & "/assets.txt");
printf " [GW or GWh]\t [GW or GWh]\t [0-1]\t [0-1]\t [0-1]\t [0-1]\t [0-1]\t [-]\t [ktCO2-eq./GW or GWh] " >> (PathName & "/assets.txt");
for {i in END_USES_TYPES, tech in TECHNOLOGIES_OF_END_USES_TYPE[i]}{
    printf "\n%s\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t",tech,
C_inv[tech],C_maint[tech],lifetime[tech],f_min[tech],F[tech],f_max[tech],
fmin_perc[tech],
sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} (F_t [tech,h,td] ) / max(sum {j2 in
TECHNOLOGIES_OF_END_USES_TYPE[i], t2 in PERIODS, h2 in HOUR_OF_PERIOD[t2], td2 in TYPICAL_DAY_OF_PERIOD[t2]} (F_t [j2, h2,
td2] ) , 0.00001) ,fmax_perc[tech],
sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} (F_t [tech,h,td] * t_op[h,td]) / 8760 / max(F[tech],0.0001),
c_p[tech],tau[tech],GWP_constr[tech] >> (PathName & "/assets.txt");
}
for {tech in STORAGE_TECH}{
    printf "\n%s\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t",tech,
C_inv[tech],C_maint[tech],lifetime[tech],f_min[tech],F[tech],f_max[tech],
fmin_perc[tech],
-1,
fmax_perc[tech],
sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t],l in LAYERS: storage_eff_out [tech,l] > 0} -min(0,Storage_out [tech, l, h, td] / storage_eff_out [tech, l] - Storage_in [tech, l, h, td] * storage_eff_in [tech, l]) / 8760 / max(F[tech],0.0001)
,c_p[tech],tau[tech],GWP_constr[tech] >> (PathName & "/assets.txt");
}
for {tech in INFRASTRUCTURE}{
    printf "\n%s\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t",tech,
C_inv[tech],C_maint[tech],lifetime[tech],f_min[tech],F[tech],f_max[tech],
fmin_perc[tech],
-1,
fmax_perc[tech],
sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]} (F_t [tech,h,td] * t_op[h,td]) / 8760 / max(F[tech],0.0001)
,c_p[tech],tau[tech],GWP_constr[tech] >> (PathName & "/assets.txt");
}

# To save time remove until end of 'LAYERS FLUXES'

#    STORAGE distribution CURVES
print "--------------SAVING STORAGE -----------";
printf "Time\t" > (PathName & "/hourly_data/energy_stored.txt");
for {i in STORAGE_TECH }{
    printf "%s\t", i >> (PathName & "/hourly_data/energy_stored.txt");
}
for {i in STORAGE_TECH }{
    printf "%s_in\t" , i >> (PathName & "/hourly_data/energy_stored.txt");
    printf "%s_out\t", i >> (PathName & "/hourly_data/energy_stored.txt");
}
for {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}{
    printf "\n %d\t",t  >> (PathName & "/hourly_data/energy_stored.txt");
    for {i in STORAGE_TECH}{
        if F[i]=0 then
            printf "\t" >> (PathName & "/hourly_data/energy_stored.txt");
        else
            printf "%f\t", Storage_level[i, t] >> (PathName & "/hourly_data/energy_stored.txt");
    }
    for {i in STORAGE_TECH}{
        if F[i]=0 then
            printf "\t\t" >> (PathName & "/hourly_data/energy_stored.txt");
        else {
            printf "%f\t", (sum {l in LAYERS: storage_eff_in [i,l] > 0}-(Storage_in [i, l, h, td] * storage_eff_in [i, l]))	>> (PathName & "/hourly_data/energy_stored.txt");
            printf "%f\t", (sum {l in LAYERS: storage_eff_in [i,l] > 0}	(Storage_out [i, l, h, td] / storage_eff_out [i, l]))	>> (PathName & "/hourly_data/energy_stored.txt");
        }
    }
}

# LAYERS FLUXES
print "--------------SAVING LAYERS -----------";
    for {l in LAYERS}{
    printf "Td \t Time\t" > (PathName & "/hourly_data/layer_" & l &".txt");
    for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH }{
        printf "%s\t",i >> (PathName & "/hourly_data/layer_" & l &".txt");
    }
    for {j in STORAGE_TECH }{
        printf "%s_Pin\t",j >> (PathName & "/hourly_data/layer_" & l &".txt");
        printf "%s_Pout\t",j >> (PathName & "/hourly_data/layer_" & l &".txt");
    }
    printf "END_USE\t" >> (PathName & "/hourly_data/layer_" & l &".txt");

    for {td in TYPICAL_DAYS, h in HOURS}{
        printf "\n %d \t %d\t",td,h   >> (PathName & "/hourly_data/layer_" & l &".txt");
        for {i in RESOURCES}{
            if layers_in_out[i, l] = 0 then # Incompatible
                printf "\t" >> (PathName & "/hourly_data/layer_" & l &".txt");
            else
                printf "%f\t",(layers_in_out[i, l] * F_t [i, h, td]) >> (PathName & "/hourly_data/layer_" & l &".txt");
        }
        for {i in TECHNOLOGIES diff STORAGE_TECH}{
            if layers_in_out[i, l] = 0 then # Incompatible
                printf "\t" >> (PathName & "/hourly_data/layer_" & l &".txt");
            else{
                if F[i] = 0 then #No technology installed
                    printf "\t" >> (PathName & "/hourly_data/layer_" & l &".txt");
                else {
                    printf "%f\t",(layers_in_out[i, l] * F_t [i, h, td]) >> (PathName & "/hourly_data/layer_" & l &".txt");
            }}
        }
        for {j in STORAGE_TECH}{
            if storage_eff_in[j, l] = 0 then # Incompatible
                printf "\t\t" >> (PathName & "/hourly_data/layer_" & l &".txt");
            else {
                if F[j] = 0 then #No storage
                    printf "\t\t" >> (PathName & "/hourly_data/layer_" & l &".txt");
                else {
                    printf "%f\t",(-Storage_in [j, l, h, td]) >> (PathName & "/hourly_data/layer_" & l &".txt");
                    printf "%f\t", (Storage_out [j, l, h, td])>> (PathName & "/hourly_data/layer_" & l &".txt");
            }}
        }
        printf "%f\t", -End_uses [l, h, td]  >> (PathName & "/hourly_data/layer_" & l &".txt");
    }
}

#


## Energy yearly balance
printf "Tech\t" > (PathName & "/year_balance.txt");
for {l in LAYERS}{
    printf "%s\t",l >> (PathName & "/year_balance.txt");
}
for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{
    printf "\n %s \t", i >> (PathName & "/year_balance.txt");
    for {l in LAYERS}{
        printf " %f\t", sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
layers_in_out[i, l] * F_t [i, h, td] >> (PathName & "/year_balance.txt");
    }
}
for {j in STORAGE_TECH}{
    printf "\n %s \t", j >> (PathName & "/year_balance.txt");
    for {l in LAYERS}{
        printf " %f\t", sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
(Storage_out [j, l, h, td] - Storage_in [j, l, h, td]) >> (PathName & "/year_balance.txt");
    }
}
printf "\n END_USES_DEMAND \t" >> (PathName & "/year_balance.txt");
for {l in LAYERS}{
    printf " %f\t", sum {t in PERIODS, h in HOUR_OF_PERIOD[t], td in TYPICAL_DAY_OF_PERIOD[t]}
        End_uses [l, h, td] >> (PathName & "/year_balance.txt");
}